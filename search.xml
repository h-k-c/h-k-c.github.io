<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[03：从尾到头打印链表（java）]]></title>
    <url>%2F2019%2F02%2F06%2F%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[题目简介 输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。 思路使用递归先到链表的尾部，然后返回 代码1234567891011import java.util.ArrayList;public class Solution &#123; ArrayList&lt;Integer&gt; arrayList=new ArrayList&lt;Integer&gt;(); public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) &#123; if(listNode!=null)&#123; this.printListFromTailToHead(listNode.next); arrayList.add(listNode.val); &#125; return arrayList; &#125;&#125;]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[02：替换空格（java）]]></title>
    <url>%2F2019%2F02%2F06%2F%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC%EF%BC%88%E5%89%91%E6%8C%87offer02%EF%BC%89%2F</url>
    <content type="text"><![CDATA[题目描述 &emsp;&emsp;请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。 思路 1.首先考虑边界情况 2.计算原来的长度，重新替换后新的长度 3.使用两个下标的移动来进行替换 关键代码 123456789101112131415161718192021222324252627282930313233343536373839 class Solution &#123;public: void replaceSpace(char *str,int length) &#123; //首先考虑字符串极端情况 if(str==NULL||length&lt;0)&#123; return; &#125; //计算字符串的原来的长度（包括字符串的长度以及空格的长度） int nowlength=0,blanklength=0,i=0; while(str[i]!='\0')&#123; ++nowlength; if(str[i]==' ')&#123; ++blanklength; &#125; ++i; &#125; //计算替换后的字符串的长度 int newlength=nowlength+blanklength*2; //考虑长的长度的极限情况 if(newlength&gt;length)&#123; return; &#125; //定义两个下表指向两个字符串 int a=nowlength;//指向原来的字符串长度 int b=newlength; //通过移动下表的方式来操作 while(a&gt;=0&amp;&amp;b&gt;a)&#123; if(str[a]==' ')&#123; str[b--]='0'; str[b--]='2'; str[b--]='%'; &#125; else&#123; str[b--]=str[a]; &#125; a--; &#125; &#125;&#125;;]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F02%2F%E6%96%B0%E5%BB%BA%E6%96%87%E6%9C%AC%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F02%2F02%2F%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[搭建框架基本的文件的使用: spring和相关的mybatis配置文件1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"&gt; &lt;import resource="classpath:spring/spring-*.xml"/&gt; &lt;context:component-scan base-package="com.test"&gt; &lt;context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/&gt; &lt;/context:component-scan&gt; &lt;context:property-placeholder location="classpath:db.properties"/&gt; &lt;aop:aspectj-autoproxy/&gt; &lt;bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"&gt; &lt;property name="jdbcUrl" value="$&#123;jdbc.url&#125;"/&gt; &lt;property name="driverClass" value="$&#123;jdbc.driver&#125;"/&gt; &lt;property name="user" value="$&#123;jdbc.username&#125;"/&gt; &lt;property name="password" value="$&#123;jdbc.password&#125;"/&gt; &lt;/bean&gt; &lt;bean id="sqlFactorySessionBean" class="org.mybatis.spring.SqlSessionFactoryBean"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;property name="mapperLocations" value="classpath:com/test/mapper/**/*.xml"/&gt; &lt;property name="typeAliasesPackage" value="com.test.pojo"/&gt; &lt;property name="plugins"&gt; &lt;array&gt; &lt;bean class="com.github.pagehelper.PageInterceptor"&gt; &lt;property name="properties"&gt; &lt;value&gt; reasonable=true helperDialect=mysql supportMethodsArguments=true params=count=countSql autoRuntimeDialect=true &lt;/value&gt; &lt;/property&gt; &lt;/bean&gt; &lt;/array&gt; &lt;/property&gt; &lt;/bean&gt; &lt;bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer"&gt; &lt;property name="basePackage" value="com.test.mapper"/&gt; &lt;property name="sqlSessionFactoryBeanName" value="sqlFactorySessionBean"/&gt; &lt;/bean&gt; &lt;bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"&gt; &lt;property name="dataSource" ref="dataSource"/&gt; &lt;/bean&gt; &lt;tx:advice transaction-manager="dataSourceTransactionManager" id="transactionAdvice"&gt; &lt;tx:attributes&gt; &lt;tx:method name="select*" read-only="true"/&gt; &lt;tx:method name="query*" read-only="true"/&gt; &lt;tx:method name="get*" read-only="true"/&gt; &lt;tx:method name="ask*" propagation="REQUIRED" rollback-for="Exception"/&gt; &lt;tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/&gt; &lt;tx:method name="add*" propagation="REQUIRED" rollback-for="Exception"/&gt; &lt;tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/&gt; &lt;tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/&gt; &lt;/tx:attributes&gt; &lt;/tx:advice&gt; &lt;aop:config&gt; &lt;aop:pointcut expression="execution(* com.test.service..*.*(..))" id="txCut"/&gt; &lt;aop:advisor advice-ref="transactionAdvice" pointcut-ref="txCut"/&gt; &lt;/aop:config&gt; &lt;!--采用注解进行事务配置，请在Service的配置类上面加上注解标识--&gt; &lt;tx:annotation-driven transaction-manager="dataSourceTransactionManager"/&gt;&lt;/beans&gt; mapper文件的头文件12&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt; spring-servlet的配置文件123456789101112131415161718192021222324252627282930&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"&gt; &lt;context:component-scan base-package="com.test.controller"/&gt; &lt;bean id="internalResourceViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix" value="/jsp/"/&gt; &lt;property name="suffix" value=".jsp"/&gt; &lt;/bean&gt; &lt;mvc:annotation-driven/&gt; &lt;mvc:default-servlet-handler/&gt; &lt;bean id="commonsMultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt; &lt;property name="maxUploadSize" value="1000000000"/&gt; &lt;property name="defaultEncoding" value="UTF-8"/&gt; &lt;/bean&gt;&lt;/beans&gt; log4j文件12345678# Global logging configurationlog4j.rootLogger=INFO, stdout# MyBatis logging configuration...log4j.logger.com.test.mapper=DEBUG# Console output...log4j.appender.stdout=org.apache.log4j.ConsoleAppenderlog4j.appender.stdout.layout=org.apache.log4j.PatternLayoutlog4j.appender.stdout.layout.ConversionPattern=%5p [%t] - %m%n 数据库配置文件1234jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/onlineqa?useUnicode=true&amp;characterEncoding=UTF-8jdbc.username=rootjdbc.password=123456]]></content>
  </entry>
  <entry>
    <title><![CDATA[ssm的心得体会]]></title>
    <url>%2F2018%2F12%2F26%2Fssm%E7%9A%84%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;首先这次简单的项目就是使用了maven工程写的员工信息的crud操作，使用的框架是ssm，当然其中的界面还有一点booststrap的使用。下面就详细的说一说这一次的收获与心得。&emsp;&emsp;当自己只得到要做一个项目的时候，首先就是先要搭建自己的平台，也就是这一次的ssm平台，因为本次使用的是maven工程与以往的project不同，所以我先查阅了maven的具体的教程的使用：远程仓库，这里有环境的配置以及详细的介绍。&emsp;&emsp;maven的项目创建好了之后就是，搭建自己的环境。首先就是在Porn.xml中添加自己需要的jar的包，这种添加的方式和以往的project是不同的，不需要导入任何大的包。而是通过自动加载的方式。而我们只需要知道那些事自己需要的包的名称和版本号。这些在maven仓库中都能看到。远程仓库。 &emsp;&emsp;等jar包加载完全之后就可以进行文件夹的创建，这种思想也是平时所用的mvc格式，就是数据层，服务层，控制层。然后就是配合框架用的配置文件。因为这里是框架的整个使用，所以项目中创建了 &emsp;&emsp; dispatcherServlet-servlet文件（前端控制器）：其中配置了springMvc的配置文件，也就是包含逻辑的跳转。配置了视图解析器，也就是前缀和后缀。其中还有就是能支持springMvc更高级一些功能快捷的ajax请求。&emsp;&emsp;applicationContext文件：这个文件是mybaits和spring的整合类。所以首先配置了spring的配置文件，其中包括配置数据源，在引入数据源的时候使用了配置文件.property文件这样更方便数据的修改，从而使结构更加的清晰。然后就是配置了spring和mybatis整合的配置文件的一些属性，也就是sqlSessionFactroy。其中需要指定的是项目中mybaits全局配置文件的位置，以及制定了mybaits的mapper的文件的位置，当然还包括之前配置的数据源。然后就是把mybaits的接口实现到ioc容器中，主要的实现就是扫描所有的dao的接口，加入ioc的容器中。然后就是配置一个可以批量执行的SQLSessionFactory作用是进行批量操作的时候使用比如插入一千条语句到数据库中，这个时候使用executor.BATCH,就很方便。然后就是事务的配置，主要是控制数据源。然后就是开启注解的事务，使用的是xml配置的形式的事务，其中包括切入点的表达式，配置事务的增强。注意：spring配置文件的核心点是数据源，与mybaits的整合，事务控制。 &emsp;&emsp;mybatis-config：这是mybaits的文件的配置，其中定义了驼峰规则，别名的定义，和分页的插件。&emsp;&emsp;所有的配置文件配置好了之后在对web.xml中进行配置，其中包括启动Spring容器，配置springMvc有关的前端控制器拦截所有的请求，字符编码过滤器，使用rest风格的uri。 以上就是ssm的环境的搭建以及配置简单介绍，下面就是进行项目开发中一些知识点和心得：&emsp;&emsp;首先是逆向工程的使用，逆向工程可以说是mybaits的一个非常好用的工具，其中包括一个main函数和一个.xml文件，配置文件中包含的内容是数据库连接信息，需要指定sql的映射文件，也就是生成.xml的文件。然后还要指定dao接口生成的位置mapper，也就是.java文件。还有就是指定了生成的表的策略，就是对应的表明和生成的bean类的名字。逆向工程的使用其中有详细的介绍以及注释。在实现的过程中我们自己扩展了查询的操作。&emsp;&emsp;然后我知道的是测试类的使用也就是junit的使用，在本次的项目中我们分别进行了对dao层的使用以及对springmvc功能的测试。在测试·dao层的时候主要就是获取sqlSessionFactory中的mapper，然后通过所对应的方法来进行crud才操作。注意的是需要指出Spring的文件。然后就是对springmvc等的测试。测试中使用虚拟mvc的请求，获取到处理结果。其中包括的方法初始化方法以及使用。&emsp;&emsp;然后项目首先中使用的是静态的html以及配合boostrap的使用。通过查找文档，和jstl语句中foreach的使用以及标签库的使用。然后是通过使用js里面的jquery的使用。具体的boostrap使用和jquery的使用还有ajax的使用可以参考教程：菜鸟教程。其中包括了jquery和ajax的结合使用。&emsp;&emsp;然后就是分页插件的使用，这个插件是mybaits提供的一款很好用的插件。还有就是使用了json数据的解析。详情可以观察&emsp;&emsp;注意：项目的使用过程中学会查看文档很重要，很多使用的方法都详细的记录在文档上。]]></content>
      <tags>
        <tag>闲笔头</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01：二维数组中的查找（java）]]></title>
    <url>%2F2018%2F12%2F26%2F01%EF%BC%9A%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE%EF%BC%88java%EF%BC%89%2F</url>
    <content type="text"><![CDATA[题目描述 &emsp;&emsp;在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。 简单的思路 &emsp;&emsp;最简单的方法就是遍历所有的元素，但是这种方法的效率最低。所以在原来的基础上进行了更新操作。通过题目可以得知，二维数组基本上是有顺序的，从左下角来看，向上的数字递减，向右的数字递增，因此从左下角开始查找的时候，当要查找的数字大时，向右移动，要查找的数字比左下角的小的时候，向上移动。 代码1234567891011121314151617181920public class Solution &#123; public boolean Find(int target, int [][] array) &#123; if(array.length==0)&#123; return false; &#125; int len=array.length-1,i=0; while(i&lt;array[0].length&amp;&amp;len&gt;=0)&#123; if(array[len][i]&gt;target)&#123; len--; &#125; else if(array[len][i]&lt;target)&#123; i++; &#125; else&#123; return true; &#125; &#125; return false; &#125;&#125; 注：代码只有关键函数；]]></content>
      <tags>
        <tag>剑指offer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我与hexo的过往]]></title>
    <url>%2F2018%2F12%2F22%2F%E6%88%91%E4%B8%8Ehexo%E7%9A%84%E8%BF%87%E5%BE%80%2F</url>
    <content type="text"><![CDATA[&lt;一&gt; 2018.12.22 一年前闲来无于是就准备写写博客与随笔，但是写博客的软件也是比较多的，找来找去最后还是准备使用git+hexo这个搭配，在配上自己的域名也会显得非常个性化。然后出现的事故就是又一次电脑重装系统的时候一切的文件都没了，当时感觉很无奈，但是现在来看也不是大问题。现在想想也是后悔莫及。 想想之前在博客里写过一套数据结构的基本解析，虽然不是很深奥，但是也是能基本的接触到皮毛再加上自己的理解。 接下里的打算就是准备做一套剑指offer的解析。]]></content>
      <tags>
        <tag>闲笔头</tag>
      </tags>
  </entry>
</search>
